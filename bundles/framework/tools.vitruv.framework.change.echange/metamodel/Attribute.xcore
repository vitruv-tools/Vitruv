@Ecore(nsURI="http://tools.vitruv/EChange/Feature/Attribute/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.feature.attribute

import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EObject
import tools.vitruv.framework.change.echange.AdditiveEChange
import tools.vitruv.framework.change.echange.SubtractiveEChange
import tools.vitruv.framework.change.echange.feature.FeatureEChange
import tools.vitruv.framework.change.echange.feature.list.InsertInListEChange
import tools.vitruv.framework.change.echange.feature.list.RemoveFromListEChange
import tools.vitruv.framework.change.echange.feature.single.ReplaceSingleValuedFeatureEChange

type EObj wraps EObject

/**
 * Abstract EChange which updates the value of an attribute.
 */
abstract class UpdateAttributeEChange<A extends EObj> extends FeatureEChange<A, EAttribute> {
}

/**
 * Abstract EChange which inserts a new value into an attribute.
 */
abstract class AdditiveAttributeEChange<A extends EObj, T extends Object> extends UpdateAttributeEChange<A>, AdditiveEChange<T> {
	/**
	 * The value which will be inserted.
	 */
	T[1] newValue
}

/**
 * Abstract EChange which removes a value from an attribute.
 */
abstract class SubtractiveAttributeEChange<A extends EObj, T extends Object> extends UpdateAttributeEChange<A>, SubtractiveEChange<T> {
	/**
	 * The value which will be removed.
	 */
	T[1] oldValue
}

/**
 * EChange which inserts a new value into a many valued attribute.
 */
class InsertEAttributeValue<A extends EObj, T extends Object> extends InsertInListEChange<A, EAttribute, T>, AdditiveAttributeEChange<A, T> {

}

/**
 * EChange which removes the value of a many valued attribute.
 */
class RemoveEAttributeValue<A extends EObj, T extends Object> extends RemoveFromListEChange<A, EAttribute, T>, SubtractiveAttributeEChange<A, T> {

}

/**
 * EChange which replaces the value of the single valued attribute.
 */
class ReplaceSingleValuedEAttribute<A extends EObj, T extends Object> extends ReplaceSingleValuedFeatureEChange<A, EAttribute, T>, AdditiveAttributeEChange<A, T>, SubtractiveAttributeEChange<A, T> {

}