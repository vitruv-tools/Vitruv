@Ecore(nsURI="http://tools.vitruv/EChange/Feature/List/1.0")
@GenModel(modelName="Change") //@GenModel(editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange.feature.list

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import tools.vitruv.framework.change.echange.SubtractiveEChange
import tools.vitruv.framework.change.echange.AdditiveEChange
import tools.vitruv.framework.change.echange.feature.UpdateMultiValuedFeatureEChange

type EObj wraps EObject
type EFeat wraps EStructuralFeature

/**
 * Abstract EChange which changes an EList.
 */
abstract class UpdateSingleListEntryEChange<A extends EObj, F extends EFeat> extends UpdateMultiValuedFeatureEChange<A, F> {
	int[1] index = "0"
}

/** 
 * Abstract EChange which inserts a value into an EList.
 */
abstract class InsertInListEChange<A extends EObj, F extends EFeat, T extends Object> extends UpdateSingleListEntryEChange<A, F>, AdditiveEChange<T> {
}

/**
 * Abstract EChange which removes a value from an EList.
 */
abstract class RemoveFromListEChange<A extends EObj, F extends EFeat, T extends Object> extends UpdateSingleListEntryEChange<A, F>, SubtractiveEChange<T> {
}
