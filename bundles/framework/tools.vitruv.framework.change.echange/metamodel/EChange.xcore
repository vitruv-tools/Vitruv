@Ecore(nsURI="http://tools.vitruv/EChange/1.0")
@GenModel(modelName="Change",prefix="EChange") //@GenModel(prefix="EChange", editDirectory="/tools.vitruv.framework.change.echange.edit/src", editorDirectory="/tools.vitruv.framework.change.echange.editor/src", modelName="Change", modelPluginClass="", editPluginClass="tools.vitruv.framework.change.provider.ChangeEditPlugin", editorPluginClass="tools.vitruv.framework.change.echange.presentation.ChangeEditorPlugin", testsDirectory="tools.vitruv.framework.change.echange.tests/src", testSuiteClass="tools.vitruv.framework.change.echange.tests.ChangeAllTests", importerID="org.eclipse.emf.importer.ecore", editorPluginID="tools.vitruv.framework.change.echange.editor", testsPluginID="tools.vitruv.framework.change.echange.tests")
package tools.vitruv.framework.change.echange

import org.eclipse.emf.common.command.Command
import org.eclipse.emf.ecore.resource.ResourceSet
import tools.vitruv.framework.change.echange.resolve.EChangeResolver
import tools.vitruv.framework.change.echange.util.ApplyEChangeSwitch

type Command wraps Command

type ResourceSet wraps ResourceSet

/**
 * Abstract change, which can be applied forward or backward, after it was resolved to a specific instance of a model.
 */
abstract class EChange {
	/**
	 * Returns if all proxy EObjects of the change are resolved to concrete EObjects of a resource set.
	 * Needs to be true to apply the change.
	 * @return	All proxy EObjects are resolved to concrete EObjects.
	 */
	op boolean isResolved() {
		return true
	}
	/**
	 * Creates a copy of the change and resolves the unresolved proxy EObjects of the change to a given set of 
	 * resources with concrete EObjects.
	 * The model has to be in the state before the change is applied forward. If the model is in state after the
	 * change and it will be applied backward, {@link resolveAfter} has to be called instead.
	 * Before the change can be applied all proxy objects need to be resolved.
	 * @param 	resourceSet The {@code ResourceSet} which contains the concrete EObjects the proxy objects of
	 * 			the unresolved should be resolved to.
	 * @return 	Returns a resolved copy of the change. If the copy could not be resolved or the resource set
	 * 			is {@code null}, it returns {@code null}. If the change is already resolved an exception is thrown.
	 * @throws IllegalStateException The change is already resolved.
	 */
	op EChange resolveBefore(ResourceSet resourceSet) {
		return EChangeResolver.resolveCopy(this, resourceSet, true, true)
	}
	/**
	 * Creates a copy of the change and resolves the unresolved proxy EObjects of the change to a given set 
	 * of resources with concrete EObjects.
	 * The model has to be in the state after the change is applied backward. If the model is in state before
	 * the change and it will be applied forward, {@link resolveBefore} has to be called instead.
	 * Before the change can be applied all proxy objects need to be resolved.
	 * @param 	resourceSet The {@code ResourceSet} which contains the concrete EObjects the proxy objects of
	 * 			the unresolved should be resolved to.
	 * @return 	Returns a resolved copy of the change. If the copy could not be resolved or the resource set
	 * 			is {@code null}, it returns {@code null}. If the change is already resolved and exception is thrown.
	 * @throws IllegalStateException The change is already resolved.
	 */
	op EChange resolveAfter(ResourceSet resourceSet) {
		return EChangeResolver.resolveCopy(this, resourceSet, false, true)
	}
	
	/**
	 * Resolves the change like {@link resolveBefore}, but also applies the change forward.
	 * If the change was already resolved, it returns the original change and applies it forward.
	 * @param 	resourceSet The {@code ResourceSet} which contains the concrete EObjects the proxy objects of
	 * 			the unresolved should be resolved to.
	 * @return 	Returns the resolved change if the change could be applied forward. The returned change
	 * 			is a copy of the change or, if the change was already resolved, the original change. 
	 * 			If the change could not be resolved and / or applied or the 
	 * 			resource set is {@code null}, it returns {@code null}
	 * @throws IllegalStateException The change is already resolved.
	 * @throws RuntimeException The change could not be applied.
	 */
	op EChange resolveBeforeAndApplyForward(ResourceSet resourceSet) {
		val resolvedChange = resolveBefore(resourceSet)
		if (resolvedChange != null && resolvedChange.applyForward) {
			return resolvedChange
		} else {
			return null
		}
	}
	/**
	 * Resolves the change like {@link resolveAfter}, but also applies the change backward.
	 * If the change was already resolved, it returns the original change and applies it backward.
	 * @param 	resourceSet The {@code ResourceSet} which contains the concrete EObjects the proxy objects of
	 * 			the unresolved should be resolved to.
	 * @return 	Returns the resolved change if the change could be applied backward. The returned change
	 * 			is a copy of the change or, if the change was already resolved, the original change. 
	 * 			If the change could not be resolved and / or applied or the resource set is {@code null}, 
	 * 			it returns {@code null}
	 * @throws IllegalStateException The change is already resolved.
	 * @throws RuntimeException The change could not be applied.
	 */
	op EChange resolveAfterAndApplyBackward(ResourceSet resourceSet) {
		val resolvedChange = resolveAfter(resourceSet)
		if (resolvedChange != null && resolvedChange.applyBackward) {
			return resolvedChange
		} else {
			return null
		}
	}
	/**
	 * Applies the change to the model which the change was resolved to.
	 * The change must be resolved before it can be applied.
	 * @return	Returns whether the change was successfully applied forward. If the
	 * 			change was not resolved an Exception is thrown. 
	 * 			If the change could not be applied it returns {@code false}.
	 * 			Otherwise it returns {@code true}.
	 * @throws IllegalStateException The change is not resolved
	 * @throws RuntimeException The change could not be applied.
	 */
	op boolean applyForward() {
		ApplyEChangeSwitch.applyEChange(this, true)
	}
	/**
	 * Reverts the change on the model which the change was resolved to.
	 * The change must be resolved before it can be reverted.
	 * @return	Returns whether the change was successfully applied backward. If the
	 * 			change was not resolved an Exception is thrown. 
	 * 			If the change could not be applied it returns {@code false}.
	 * 			Otherwise it returns {@code true}.
	 * @throws IllegalStateException The change is not resolved.
	 * @throws RuntimeException The change could not be applied.
	 */
	op boolean applyBackward() {
		ApplyEChangeSwitch.applyEChange(this, false)
	}
}

/**
 * Abstract EChange which sub changes can only be applied together.
 */
abstract class AtomicEChange extends EChange {
}

/**
 * Abstract EChange which adds a new value, like an EObject or primitive type.
 */
abstract class AdditiveEChange<T extends Object> extends AtomicEChange {
	/**
	 * Get the added value.
	 * @return The newly added value.
	 */
	op T[1] getNewValue()
}

/**
 * Abstract EChange which removes an existing value, like an EObject or primitive type.
 */
abstract class SubtractiveEChange<T extends Object> extends AtomicEChange {
	/**
	 * Get the removed value.
	 * @return The value which will be removed.
	 */
	op T[1] getOldValue()
}