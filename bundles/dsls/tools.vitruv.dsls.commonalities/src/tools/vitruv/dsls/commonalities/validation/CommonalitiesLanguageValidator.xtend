/*
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.commonalities.validation

import org.eclipse.xtext.validation.Check
import tools.vitruv.dsls.commonalities.language.CommonalityReferenceMapping
import tools.vitruv.dsls.commonalities.language.ParticipationClass
import tools.vitruv.dsls.commonalities.language.elements.Metaclass

import static tools.vitruv.dsls.commonalities.language.LanguagePackage.Literals.*

import static extension tools.vitruv.dsls.commonalities.language.extensions.CommonalitiesLanguageModelExtensions.*

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CommonalitiesLanguageValidator extends AbstractCommonalitiesLanguageValidator {

//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					CommonalitiesLanguagePackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def checkCommonalityReferenceMappingHasCorrectType(CommonalityReferenceMapping mapping) {
		val referenceRightType = mapping.reference?.type
		if (referenceRightType === null) return;
		if (!(referenceRightType instanceof Metaclass)) {
			error('Reference Mappings can only use EReferences', COMMONALITY_REFERENCE_MAPPING__REFERENCE)
		} else {
			val matchingParticipations = mapping.matchingReferencedParticipations.toList
			if (matchingParticipations.size === 0) {
				error('''«mapping.declaringReference.referenceType» has no participation with a subtype of «
				»«referenceRightType».''', COMMONALITY_REFERENCE_MAPPING__REFERENCE)
			} else if (matchingParticipations.size > 1) {
				error('''Ambiguous reference mapping: «mapping.declaringReference.referenceType» has more than one «
					»participations with a subtype of «referenceRightType».''',
					COMMONALITY_REFERENCE_MAPPING__REFERENCE)
			}
		}
	}

	@Check
	def checkParticipationClassSuperclassIsNotAbstract(ParticipationClass participationClass) {
		if (participationClass.superMetaclass?.isAbstract) {
			error('''Abstract classes cannot be used as participations.''', PARTICIPATION_CLASS__SUPER_METACLASS)
		}
	}
}
