/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tools.vitruv.dsls.mappings.mappingsLanguage.BidirectionalizableCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.Dependency;
import tools.vitruv.dsls.mappings.mappingsLanguage.Mapping;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;
import tools.vitruv.dsls.mappings.mappingsLanguage.SingleSidedCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.UnidirectionalExpression;

import tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getName <em>Name</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getDependencies <em>Dependencies</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getLeftParameters <em>Left Parameters</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getLeftConditions <em>Left Conditions</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getRightParameters <em>Right Parameters</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getRightConditions <em>Right Conditions</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getBidirectionalizableConditions <em>Bidirectionalizable Conditions</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getForwardExecutionExpression <em>Forward Execution Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.MappingImpl#getBackwardExecutionExpression <em>Backward Execution Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingImpl extends MinimalEObjectImpl.Container implements Mapping
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getDependencies() <em>Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependencies()
   * @generated
   * @ordered
   */
  protected EList<Dependency> dependencies;

  /**
   * The cached value of the '{@link #getLeftParameters() <em>Left Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftParameters()
   * @generated
   * @ordered
   */
  protected EList<NamedMetaclassReference> leftParameters;

  /**
   * The cached value of the '{@link #getLeftConditions() <em>Left Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftConditions()
   * @generated
   * @ordered
   */
  protected EList<SingleSidedCondition> leftConditions;

  /**
   * The cached value of the '{@link #getRightParameters() <em>Right Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightParameters()
   * @generated
   * @ordered
   */
  protected EList<NamedMetaclassReference> rightParameters;

  /**
   * The cached value of the '{@link #getRightConditions() <em>Right Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightConditions()
   * @generated
   * @ordered
   */
  protected EList<SingleSidedCondition> rightConditions;

  /**
   * The cached value of the '{@link #getBidirectionalizableConditions() <em>Bidirectionalizable Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBidirectionalizableConditions()
   * @generated
   * @ordered
   */
  protected EList<BidirectionalizableCondition> bidirectionalizableConditions;

  /**
   * The cached value of the '{@link #getForwardExecutionExpression() <em>Forward Execution Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForwardExecutionExpression()
   * @generated
   * @ordered
   */
  protected UnidirectionalExpression forwardExecutionExpression;

  /**
   * The cached value of the '{@link #getBackwardExecutionExpression() <em>Backward Execution Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBackwardExecutionExpression()
   * @generated
   * @ordered
   */
  protected UnidirectionalExpression backwardExecutionExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingsLanguagePackage.Literals.MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.MAPPING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Dependency> getDependencies()
  {
    if (dependencies == null)
    {
      dependencies = new EObjectContainmentEList<Dependency>(Dependency.class, this, MappingsLanguagePackage.MAPPING__DEPENDENCIES);
    }
    return dependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NamedMetaclassReference> getLeftParameters()
  {
    if (leftParameters == null)
    {
      leftParameters = new EObjectContainmentEList<NamedMetaclassReference>(NamedMetaclassReference.class, this, MappingsLanguagePackage.MAPPING__LEFT_PARAMETERS);
    }
    return leftParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SingleSidedCondition> getLeftConditions()
  {
    if (leftConditions == null)
    {
      leftConditions = new EObjectContainmentEList<SingleSidedCondition>(SingleSidedCondition.class, this, MappingsLanguagePackage.MAPPING__LEFT_CONDITIONS);
    }
    return leftConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NamedMetaclassReference> getRightParameters()
  {
    if (rightParameters == null)
    {
      rightParameters = new EObjectContainmentEList<NamedMetaclassReference>(NamedMetaclassReference.class, this, MappingsLanguagePackage.MAPPING__RIGHT_PARAMETERS);
    }
    return rightParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SingleSidedCondition> getRightConditions()
  {
    if (rightConditions == null)
    {
      rightConditions = new EObjectContainmentEList<SingleSidedCondition>(SingleSidedCondition.class, this, MappingsLanguagePackage.MAPPING__RIGHT_CONDITIONS);
    }
    return rightConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BidirectionalizableCondition> getBidirectionalizableConditions()
  {
    if (bidirectionalizableConditions == null)
    {
      bidirectionalizableConditions = new EObjectContainmentEList<BidirectionalizableCondition>(BidirectionalizableCondition.class, this, MappingsLanguagePackage.MAPPING__BIDIRECTIONALIZABLE_CONDITIONS);
    }
    return bidirectionalizableConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnidirectionalExpression getForwardExecutionExpression()
  {
    return forwardExecutionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForwardExecutionExpression(UnidirectionalExpression newForwardExecutionExpression, NotificationChain msgs)
  {
    UnidirectionalExpression oldForwardExecutionExpression = forwardExecutionExpression;
    forwardExecutionExpression = newForwardExecutionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION, oldForwardExecutionExpression, newForwardExecutionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForwardExecutionExpression(UnidirectionalExpression newForwardExecutionExpression)
  {
    if (newForwardExecutionExpression != forwardExecutionExpression)
    {
      NotificationChain msgs = null;
      if (forwardExecutionExpression != null)
        msgs = ((InternalEObject)forwardExecutionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION, null, msgs);
      if (newForwardExecutionExpression != null)
        msgs = ((InternalEObject)newForwardExecutionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION, null, msgs);
      msgs = basicSetForwardExecutionExpression(newForwardExecutionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION, newForwardExecutionExpression, newForwardExecutionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnidirectionalExpression getBackwardExecutionExpression()
  {
    return backwardExecutionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBackwardExecutionExpression(UnidirectionalExpression newBackwardExecutionExpression, NotificationChain msgs)
  {
    UnidirectionalExpression oldBackwardExecutionExpression = backwardExecutionExpression;
    backwardExecutionExpression = newBackwardExecutionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION, oldBackwardExecutionExpression, newBackwardExecutionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBackwardExecutionExpression(UnidirectionalExpression newBackwardExecutionExpression)
  {
    if (newBackwardExecutionExpression != backwardExecutionExpression)
    {
      NotificationChain msgs = null;
      if (backwardExecutionExpression != null)
        msgs = ((InternalEObject)backwardExecutionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION, null, msgs);
      if (newBackwardExecutionExpression != null)
        msgs = ((InternalEObject)newBackwardExecutionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION, null, msgs);
      msgs = basicSetBackwardExecutionExpression(newBackwardExecutionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION, newBackwardExecutionExpression, newBackwardExecutionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.MAPPING__DEPENDENCIES:
        return ((InternalEList<?>)getDependencies()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.MAPPING__LEFT_PARAMETERS:
        return ((InternalEList<?>)getLeftParameters()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.MAPPING__LEFT_CONDITIONS:
        return ((InternalEList<?>)getLeftConditions()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.MAPPING__RIGHT_PARAMETERS:
        return ((InternalEList<?>)getRightParameters()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.MAPPING__RIGHT_CONDITIONS:
        return ((InternalEList<?>)getRightConditions()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.MAPPING__BIDIRECTIONALIZABLE_CONDITIONS:
        return ((InternalEList<?>)getBidirectionalizableConditions()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION:
        return basicSetForwardExecutionExpression(null, msgs);
      case MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION:
        return basicSetBackwardExecutionExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.MAPPING__NAME:
        return getName();
      case MappingsLanguagePackage.MAPPING__DEPENDENCIES:
        return getDependencies();
      case MappingsLanguagePackage.MAPPING__LEFT_PARAMETERS:
        return getLeftParameters();
      case MappingsLanguagePackage.MAPPING__LEFT_CONDITIONS:
        return getLeftConditions();
      case MappingsLanguagePackage.MAPPING__RIGHT_PARAMETERS:
        return getRightParameters();
      case MappingsLanguagePackage.MAPPING__RIGHT_CONDITIONS:
        return getRightConditions();
      case MappingsLanguagePackage.MAPPING__BIDIRECTIONALIZABLE_CONDITIONS:
        return getBidirectionalizableConditions();
      case MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION:
        return getForwardExecutionExpression();
      case MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION:
        return getBackwardExecutionExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.MAPPING__NAME:
        setName((String)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__DEPENDENCIES:
        getDependencies().clear();
        getDependencies().addAll((Collection<? extends Dependency>)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__LEFT_PARAMETERS:
        getLeftParameters().clear();
        getLeftParameters().addAll((Collection<? extends NamedMetaclassReference>)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__LEFT_CONDITIONS:
        getLeftConditions().clear();
        getLeftConditions().addAll((Collection<? extends SingleSidedCondition>)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__RIGHT_PARAMETERS:
        getRightParameters().clear();
        getRightParameters().addAll((Collection<? extends NamedMetaclassReference>)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__RIGHT_CONDITIONS:
        getRightConditions().clear();
        getRightConditions().addAll((Collection<? extends SingleSidedCondition>)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__BIDIRECTIONALIZABLE_CONDITIONS:
        getBidirectionalizableConditions().clear();
        getBidirectionalizableConditions().addAll((Collection<? extends BidirectionalizableCondition>)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION:
        setForwardExecutionExpression((UnidirectionalExpression)newValue);
        return;
      case MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION:
        setBackwardExecutionExpression((UnidirectionalExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.MAPPING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MappingsLanguagePackage.MAPPING__DEPENDENCIES:
        getDependencies().clear();
        return;
      case MappingsLanguagePackage.MAPPING__LEFT_PARAMETERS:
        getLeftParameters().clear();
        return;
      case MappingsLanguagePackage.MAPPING__LEFT_CONDITIONS:
        getLeftConditions().clear();
        return;
      case MappingsLanguagePackage.MAPPING__RIGHT_PARAMETERS:
        getRightParameters().clear();
        return;
      case MappingsLanguagePackage.MAPPING__RIGHT_CONDITIONS:
        getRightConditions().clear();
        return;
      case MappingsLanguagePackage.MAPPING__BIDIRECTIONALIZABLE_CONDITIONS:
        getBidirectionalizableConditions().clear();
        return;
      case MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION:
        setForwardExecutionExpression((UnidirectionalExpression)null);
        return;
      case MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION:
        setBackwardExecutionExpression((UnidirectionalExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.MAPPING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MappingsLanguagePackage.MAPPING__DEPENDENCIES:
        return dependencies != null && !dependencies.isEmpty();
      case MappingsLanguagePackage.MAPPING__LEFT_PARAMETERS:
        return leftParameters != null && !leftParameters.isEmpty();
      case MappingsLanguagePackage.MAPPING__LEFT_CONDITIONS:
        return leftConditions != null && !leftConditions.isEmpty();
      case MappingsLanguagePackage.MAPPING__RIGHT_PARAMETERS:
        return rightParameters != null && !rightParameters.isEmpty();
      case MappingsLanguagePackage.MAPPING__RIGHT_CONDITIONS:
        return rightConditions != null && !rightConditions.isEmpty();
      case MappingsLanguagePackage.MAPPING__BIDIRECTIONALIZABLE_CONDITIONS:
        return bidirectionalizableConditions != null && !bidirectionalizableConditions.isEmpty();
      case MappingsLanguagePackage.MAPPING__FORWARD_EXECUTION_EXPRESSION:
        return forwardExecutionExpression != null;
      case MappingsLanguagePackage.MAPPING__BACKWARD_EXECUTION_EXPRESSION:
        return backwardExecutionExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MappingImpl
