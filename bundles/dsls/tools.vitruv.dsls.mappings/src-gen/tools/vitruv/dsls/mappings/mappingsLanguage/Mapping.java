/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Mapping</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getName <em>Name</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getDependencies <em>Dependencies</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getLeftParameters <em>Left Parameters</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getLeftConditions <em>Left Conditions</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getRightParameters <em>Right Parameters</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getRightConditions <em>Right Conditions</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getBidirectionalizableConditions <em>Bidirectionalizable Conditions</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getForwardExecutionExpression <em>Forward Execution Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getBackwardExecutionExpression <em>Backward Execution Expression</em>}</li>
 * </ul>
 *
 * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping()
 * @model
 * @generated
 */
public interface Mapping extends EObject
{
  /**
   * Returns the value of the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Name</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Name</em>' attribute.
   * @see #setName(String)
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_Name()
   * @model
   * @generated
   */
  String getName();

  /**
   * Sets the value of the '{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getName <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Name</em>' attribute.
   * @see #getName()
   * @generated
   */
  void setName(String value);

  /**
   * Returns the value of the '<em><b>Dependencies</b></em>' containment reference list.
   * The list contents are of type {@link tools.vitruv.dsls.mappings.mappingsLanguage.Dependency}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Dependencies</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Dependencies</em>' containment reference list.
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_Dependencies()
   * @model containment="true"
   * @generated
   */
  EList<Dependency> getDependencies();

  /**
   * Returns the value of the '<em><b>Left Parameters</b></em>' containment reference list.
   * The list contents are of type {@link tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Left Parameters</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Left Parameters</em>' containment reference list.
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_LeftParameters()
   * @model containment="true"
   * @generated
   */
  EList<NamedMetaclassReference> getLeftParameters();

  /**
   * Returns the value of the '<em><b>Left Conditions</b></em>' containment reference list.
   * The list contents are of type {@link tools.vitruv.dsls.mappings.mappingsLanguage.SingleSidedCondition}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Left Conditions</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Left Conditions</em>' containment reference list.
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_LeftConditions()
   * @model containment="true"
   * @generated
   */
  EList<SingleSidedCondition> getLeftConditions();

  /**
   * Returns the value of the '<em><b>Right Parameters</b></em>' containment reference list.
   * The list contents are of type {@link tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Right Parameters</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Right Parameters</em>' containment reference list.
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_RightParameters()
   * @model containment="true"
   * @generated
   */
  EList<NamedMetaclassReference> getRightParameters();

  /**
   * Returns the value of the '<em><b>Right Conditions</b></em>' containment reference list.
   * The list contents are of type {@link tools.vitruv.dsls.mappings.mappingsLanguage.SingleSidedCondition}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Right Conditions</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Right Conditions</em>' containment reference list.
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_RightConditions()
   * @model containment="true"
   * @generated
   */
  EList<SingleSidedCondition> getRightConditions();

  /**
   * Returns the value of the '<em><b>Bidirectionalizable Conditions</b></em>' containment reference list.
   * The list contents are of type {@link tools.vitruv.dsls.mappings.mappingsLanguage.BidirectionalizableCondition}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Bidirectionalizable Conditions</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Bidirectionalizable Conditions</em>' containment reference list.
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_BidirectionalizableConditions()
   * @model containment="true"
   * @generated
   */
  EList<BidirectionalizableCondition> getBidirectionalizableConditions();

  /**
   * Returns the value of the '<em><b>Forward Execution Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Forward Execution Expression</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Forward Execution Expression</em>' containment reference.
   * @see #setForwardExecutionExpression(UnidirectionalExpression)
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_ForwardExecutionExpression()
   * @model containment="true"
   * @generated
   */
  UnidirectionalExpression getForwardExecutionExpression();

  /**
   * Sets the value of the '{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getForwardExecutionExpression <em>Forward Execution Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Forward Execution Expression</em>' containment reference.
   * @see #getForwardExecutionExpression()
   * @generated
   */
  void setForwardExecutionExpression(UnidirectionalExpression value);

  /**
   * Returns the value of the '<em><b>Backward Execution Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Backward Execution Expression</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Backward Execution Expression</em>' containment reference.
   * @see #setBackwardExecutionExpression(UnidirectionalExpression)
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#getMapping_BackwardExecutionExpression()
   * @model containment="true"
   * @generated
   */
  UnidirectionalExpression getBackwardExecutionExpression();

  /**
   * Sets the value of the '{@link tools.vitruv.dsls.mappings.mappingsLanguage.Mapping#getBackwardExecutionExpression <em>Backward Execution Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Backward Execution Expression</em>' containment reference.
   * @see #getBackwardExecutionExpression()
   * @generated
   */
  void setBackwardExecutionExpression(UnidirectionalExpression value);

} // Mapping
