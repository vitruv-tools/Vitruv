/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import tools.vitruv.dsls.mappings.mappingsLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MappingsLanguageFactoryImpl extends EFactoryImpl implements MappingsLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MappingsLanguageFactory init()
  {
    try
    {
      MappingsLanguageFactory theMappingsLanguageFactory = (MappingsLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(MappingsLanguagePackage.eNS_URI);
      if (theMappingsLanguageFactory != null)
      {
        return theMappingsLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MappingsLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MappingsLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MappingsLanguagePackage.MAPPINGS_FILE: return createMappingsFile();
      case MappingsLanguagePackage.MAPPINGS_SEGMENT: return createMappingsSegment();
      case MappingsLanguagePackage.MAPPING: return createMapping();
      case MappingsLanguagePackage.DEPENDENCY: return createDependency();
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION: return createSingleSidedCondition();
      case MappingsLanguagePackage.ENFORCEABLE_CONDITION: return createEnforceableCondition();
      case MappingsLanguagePackage.FEATURE_CONDITION: return createFeatureCondition();
      case MappingsLanguagePackage.FEATURE_REFERENCE: return createFeatureReference();
      case MappingsLanguagePackage.DEPENDENT_FEATURE_REFERENCE: return createDependentFeatureReference();
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION: return createSingleValueCondition();
      case MappingsLanguagePackage.VALUE_CONDITION: return createValueCondition();
      case MappingsLanguagePackage.VALUE_EXPRESSION: return createValueExpression();
      case MappingsLanguagePackage.INDEX_CONDITION: return createIndexCondition();
      case MappingsLanguagePackage.NUM_COMPARE_CONDITION: return createNumCompareCondition();
      case MappingsLanguagePackage.MULTI_VALUE_CONDITION: return createMultiValueCondition();
      case MappingsLanguagePackage.ELEMENT_CONDITION: return createElementCondition();
      case MappingsLanguagePackage.ELEMENT_EXPRESSION: return createElementExpression();
      case MappingsLanguagePackage.NOT_EMPTY_CONDITION: return createNotEmptyCondition();
      case MappingsLanguagePackage.RESOURCE_CONDITION: return createResourceCondition();
      case MappingsLanguagePackage.CHECK_AND_ENFORCE_CONDITION: return createCheckAndEnforceCondition();
      case MappingsLanguagePackage.CHECK_EXPRESSION: return createCheckExpression();
      case MappingsLanguagePackage.ENFORCE_EXPRESSION: return createEnforceExpression();
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION: return createBidirectionalizableCondition();
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_EXPRESSION: return createBidirectionalizableExpression();
      case MappingsLanguagePackage.UNIDIRECTIONAL_EXPRESSION: return createUnidirectionalExpression();
      case MappingsLanguagePackage.BOOTSTRAPPING: return createBootstrapping();
      case MappingsLanguagePackage.CODE_BLOCK: return createCodeBlock();
      case MappingsLanguagePackage.DOCUMENTABLE: return createDocumentable();
      case MappingsLanguagePackage.METACLASS_FEATURE_REFERENCE: return createMetaclassFeatureReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MappingsLanguagePackage.NUM_COMPARE_OPERATOR:
        return createNumCompareOperatorFromString(eDataType, initialValue);
      case MappingsLanguagePackage.MULTI_VALUE_CONDITION_OPERATOR:
        return createMultiValueConditionOperatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MappingsLanguagePackage.NUM_COMPARE_OPERATOR:
        return convertNumCompareOperatorToString(eDataType, instanceValue);
      case MappingsLanguagePackage.MULTI_VALUE_CONDITION_OPERATOR:
        return convertMultiValueConditionOperatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MappingsFile createMappingsFile()
  {
    MappingsFileImpl mappingsFile = new MappingsFileImpl();
    return mappingsFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MappingsSegment createMappingsSegment()
  {
    MappingsSegmentImpl mappingsSegment = new MappingsSegmentImpl();
    return mappingsSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleSidedCondition createSingleSidedCondition()
  {
    SingleSidedConditionImpl singleSidedCondition = new SingleSidedConditionImpl();
    return singleSidedCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnforceableCondition createEnforceableCondition()
  {
    EnforceableConditionImpl enforceableCondition = new EnforceableConditionImpl();
    return enforceableCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureCondition createFeatureCondition()
  {
    FeatureConditionImpl featureCondition = new FeatureConditionImpl();
    return featureCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureReference createFeatureReference()
  {
    FeatureReferenceImpl featureReference = new FeatureReferenceImpl();
    return featureReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DependentFeatureReference createDependentFeatureReference()
  {
    DependentFeatureReferenceImpl dependentFeatureReference = new DependentFeatureReferenceImpl();
    return dependentFeatureReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleValueCondition createSingleValueCondition()
  {
    SingleValueConditionImpl singleValueCondition = new SingleValueConditionImpl();
    return singleValueCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValueCondition createValueCondition()
  {
    ValueConditionImpl valueCondition = new ValueConditionImpl();
    return valueCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValueExpression createValueExpression()
  {
    ValueExpressionImpl valueExpression = new ValueExpressionImpl();
    return valueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexCondition createIndexCondition()
  {
    IndexConditionImpl indexCondition = new IndexConditionImpl();
    return indexCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumCompareCondition createNumCompareCondition()
  {
    NumCompareConditionImpl numCompareCondition = new NumCompareConditionImpl();
    return numCompareCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultiValueCondition createMultiValueCondition()
  {
    MultiValueConditionImpl multiValueCondition = new MultiValueConditionImpl();
    return multiValueCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementCondition createElementCondition()
  {
    ElementConditionImpl elementCondition = new ElementConditionImpl();
    return elementCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementExpression createElementExpression()
  {
    ElementExpressionImpl elementExpression = new ElementExpressionImpl();
    return elementExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotEmptyCondition createNotEmptyCondition()
  {
    NotEmptyConditionImpl notEmptyCondition = new NotEmptyConditionImpl();
    return notEmptyCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceCondition createResourceCondition()
  {
    ResourceConditionImpl resourceCondition = new ResourceConditionImpl();
    return resourceCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckAndEnforceCondition createCheckAndEnforceCondition()
  {
    CheckAndEnforceConditionImpl checkAndEnforceCondition = new CheckAndEnforceConditionImpl();
    return checkAndEnforceCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckExpression createCheckExpression()
  {
    CheckExpressionImpl checkExpression = new CheckExpressionImpl();
    return checkExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnforceExpression createEnforceExpression()
  {
    EnforceExpressionImpl enforceExpression = new EnforceExpressionImpl();
    return enforceExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BidirectionalizableCondition createBidirectionalizableCondition()
  {
    BidirectionalizableConditionImpl bidirectionalizableCondition = new BidirectionalizableConditionImpl();
    return bidirectionalizableCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BidirectionalizableExpression createBidirectionalizableExpression()
  {
    BidirectionalizableExpressionImpl bidirectionalizableExpression = new BidirectionalizableExpressionImpl();
    return bidirectionalizableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnidirectionalExpression createUnidirectionalExpression()
  {
    UnidirectionalExpressionImpl unidirectionalExpression = new UnidirectionalExpressionImpl();
    return unidirectionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bootstrapping createBootstrapping()
  {
    BootstrappingImpl bootstrapping = new BootstrappingImpl();
    return bootstrapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CodeBlock createCodeBlock()
  {
    CodeBlockImpl codeBlock = new CodeBlockImpl();
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Documentable createDocumentable()
  {
    DocumentableImpl documentable = new DocumentableImpl();
    return documentable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaclassFeatureReference createMetaclassFeatureReference()
  {
    MetaclassFeatureReferenceImpl metaclassFeatureReference = new MetaclassFeatureReferenceImpl();
    return metaclassFeatureReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumCompareOperator createNumCompareOperatorFromString(EDataType eDataType, String initialValue)
  {
    NumCompareOperator result = NumCompareOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertNumCompareOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultiValueConditionOperator createMultiValueConditionOperatorFromString(EDataType eDataType, String initialValue)
  {
    MultiValueConditionOperator result = MultiValueConditionOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMultiValueConditionOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MappingsLanguagePackage getMappingsLanguagePackage()
  {
    return (MappingsLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MappingsLanguagePackage getPackage()
  {
    return MappingsLanguagePackage.eINSTANCE;
  }

} //MappingsLanguageFactoryImpl
