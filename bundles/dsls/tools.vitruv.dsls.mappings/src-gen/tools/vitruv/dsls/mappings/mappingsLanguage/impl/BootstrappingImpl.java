/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tools.vitruv.dsls.mappings.mappingsLanguage.Bootstrapping;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;
import tools.vitruv.dsls.mappings.mappingsLanguage.SingleSidedCondition;

import tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bootstrapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.BootstrappingImpl#getName <em>Name</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.BootstrappingImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.BootstrappingImpl#getBootstrapConditon <em>Bootstrap Conditon</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BootstrappingImpl extends MinimalEObjectImpl.Container implements Bootstrapping
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<NamedMetaclassReference> parameters;

  /**
   * The cached value of the '{@link #getBootstrapConditon() <em>Bootstrap Conditon</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBootstrapConditon()
   * @generated
   * @ordered
   */
  protected SingleSidedCondition bootstrapConditon;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BootstrappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingsLanguagePackage.Literals.BOOTSTRAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BOOTSTRAPPING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NamedMetaclassReference> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<NamedMetaclassReference>(NamedMetaclassReference.class, this, MappingsLanguagePackage.BOOTSTRAPPING__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleSidedCondition getBootstrapConditon()
  {
    return bootstrapConditon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBootstrapConditon(SingleSidedCondition newBootstrapConditon, NotificationChain msgs)
  {
    SingleSidedCondition oldBootstrapConditon = bootstrapConditon;
    bootstrapConditon = newBootstrapConditon;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON, oldBootstrapConditon, newBootstrapConditon);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBootstrapConditon(SingleSidedCondition newBootstrapConditon)
  {
    if (newBootstrapConditon != bootstrapConditon)
    {
      NotificationChain msgs = null;
      if (bootstrapConditon != null)
        msgs = ((InternalEObject)bootstrapConditon).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON, null, msgs);
      if (newBootstrapConditon != null)
        msgs = ((InternalEObject)newBootstrapConditon).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON, null, msgs);
      msgs = basicSetBootstrapConditon(newBootstrapConditon, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON, newBootstrapConditon, newBootstrapConditon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BOOTSTRAPPING__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
      case MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON:
        return basicSetBootstrapConditon(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BOOTSTRAPPING__NAME:
        return getName();
      case MappingsLanguagePackage.BOOTSTRAPPING__PARAMETERS:
        return getParameters();
      case MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON:
        return getBootstrapConditon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BOOTSTRAPPING__NAME:
        setName((String)newValue);
        return;
      case MappingsLanguagePackage.BOOTSTRAPPING__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends NamedMetaclassReference>)newValue);
        return;
      case MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON:
        setBootstrapConditon((SingleSidedCondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BOOTSTRAPPING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MappingsLanguagePackage.BOOTSTRAPPING__PARAMETERS:
        getParameters().clear();
        return;
      case MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON:
        setBootstrapConditon((SingleSidedCondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BOOTSTRAPPING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MappingsLanguagePackage.BOOTSTRAPPING__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case MappingsLanguagePackage.BOOTSTRAPPING__BOOTSTRAP_CONDITON:
        return bootstrapConditon != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //BootstrappingImpl
