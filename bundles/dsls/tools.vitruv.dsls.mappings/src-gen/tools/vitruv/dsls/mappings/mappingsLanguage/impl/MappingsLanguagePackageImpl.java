/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.eclipse.xtext.common.types.TypesPackage;

import org.eclipse.xtext.xbase.XbasePackage;

import org.eclipse.xtext.xtype.XtypePackage;

import tools.vitruv.dsls.mappings.mappingsLanguage.BidirectionalizableCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.BidirectionalizableExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.Bootstrapping;
import tools.vitruv.dsls.mappings.mappingsLanguage.CheckAndEnforceCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.CheckExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.CodeBlock;
import tools.vitruv.dsls.mappings.mappingsLanguage.Dependency;
import tools.vitruv.dsls.mappings.mappingsLanguage.DependentFeatureReference;
import tools.vitruv.dsls.mappings.mappingsLanguage.Documentable;
import tools.vitruv.dsls.mappings.mappingsLanguage.ElementCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.ElementExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.EnforceExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.EnforceableCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.FeatureCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.FeatureReference;
import tools.vitruv.dsls.mappings.mappingsLanguage.IndexCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.Mapping;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsFile;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguageFactory;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsSegment;
import tools.vitruv.dsls.mappings.mappingsLanguage.MetaclassFeatureReference;
import tools.vitruv.dsls.mappings.mappingsLanguage.MultiValueCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.MultiValueConditionOperator;
import tools.vitruv.dsls.mappings.mappingsLanguage.NotEmptyCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.NumCompareCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.NumCompareOperator;
import tools.vitruv.dsls.mappings.mappingsLanguage.ResourceCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.SingleSidedCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.SingleValueCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.UnidirectionalExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.ValueCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.ValueExpression;

import tools.vitruv.dsls.mirbase.mirBase.MirBasePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MappingsLanguagePackageImpl extends EPackageImpl implements MappingsLanguagePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingsFileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingsSegmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dependencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleSidedConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enforceableConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass featureConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass featureReferenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dependentFeatureReferenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleValueConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numCompareConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiValueConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass elementConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass elementExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notEmptyConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass resourceConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass checkAndEnforceConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass checkExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enforceExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bidirectionalizableConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bidirectionalizableExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unidirectionalExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bootstrappingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass codeBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass documentableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass metaclassFeatureReferenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum numCompareOperatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum multiValueConditionOperatorEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MappingsLanguagePackageImpl()
  {
    super(eNS_URI, MappingsLanguageFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MappingsLanguagePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MappingsLanguagePackage init()
  {
    if (isInited) return (MappingsLanguagePackage)EPackage.Registry.INSTANCE.getEPackage(MappingsLanguagePackage.eNS_URI);

    // Obtain or create and register package
    MappingsLanguagePackageImpl theMappingsLanguagePackage = (MappingsLanguagePackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MappingsLanguagePackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MappingsLanguagePackageImpl());

    isInited = true;

    // Initialize simple dependencies
    XbasePackage.eINSTANCE.eClass();
    XtypePackage.eINSTANCE.eClass();
    MirBasePackage.eINSTANCE.eClass();
    TypesPackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theMappingsLanguagePackage.createPackageContents();

    // Initialize created meta-data
    theMappingsLanguagePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMappingsLanguagePackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MappingsLanguagePackage.eNS_URI, theMappingsLanguagePackage);
    return theMappingsLanguagePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMappingsFile()
  {
    return mappingsFileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMappingsFile_NamespaceImports()
  {
    return (EReference)mappingsFileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMappingsFile_MappingsSegments()
  {
    return (EReference)mappingsFileEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMappingsSegment()
  {
    return mappingsSegmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMappingsSegment_Name()
  {
    return (EAttribute)mappingsSegmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMappingsSegment_LeftDomain()
  {
    return (EReference)mappingsSegmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMappingsSegment_RightDomain()
  {
    return (EReference)mappingsSegmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMappingsSegment_Mappings()
  {
    return (EReference)mappingsSegmentEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMappingsSegment_Bootstrappings()
  {
    return (EReference)mappingsSegmentEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMapping()
  {
    return mappingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMapping_Name()
  {
    return (EAttribute)mappingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_Dependencies()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_LeftParameters()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_LeftConditions()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_RightParameters()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_RightConditions()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_BidirectionalizableConditions()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_ForwardExecutionExpression()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapping_BackwardExecutionExpression()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDependency()
  {
    return dependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDependency_Mapping()
  {
    return (EReference)dependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDependency_ShortName()
  {
    return (EAttribute)dependencyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleSidedCondition()
  {
    return singleSidedConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEnforceableCondition()
  {
    return enforceableConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFeatureCondition()
  {
    return featureConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFeatureCondition_Feature()
  {
    return (EReference)featureConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFeatureReference()
  {
    return featureReferenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDependentFeatureReference()
  {
    return dependentFeatureReferenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDependentFeatureReference_DependeeShortName()
  {
    return (EReference)dependentFeatureReferenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDependentFeatureReference_DependeeFeature()
  {
    return (EReference)dependentFeatureReferenceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleValueCondition()
  {
    return singleValueConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getValueCondition()
  {
    return valueConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getValueCondition_ValueExpression()
  {
    return (EReference)valueConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getValueExpression()
  {
    return valueExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndexCondition()
  {
    return indexConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIndexCondition_Negated()
  {
    return (EAttribute)indexConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexCondition_IndexValueExpression()
  {
    return (EReference)indexConditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNumCompareCondition()
  {
    return numCompareConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNumCompareCondition_Operator()
  {
    return (EAttribute)numCompareConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMultiValueCondition()
  {
    return multiValueConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMultiValueCondition_Negated()
  {
    return (EAttribute)multiValueConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMultiValueCondition_Operator()
  {
    return (EAttribute)multiValueConditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getElementCondition()
  {
    return elementConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getElementCondition_ElementExpression()
  {
    return (EReference)elementConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getElementExpression()
  {
    return elementExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNotEmptyCondition()
  {
    return notEmptyConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNotEmptyCondition_Negated()
  {
    return (EAttribute)notEmptyConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getResourceCondition()
  {
    return resourceConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getResourceCondition_ElementExpression()
  {
    return (EReference)resourceConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getResourceCondition_PathExpression()
  {
    return (EReference)resourceConditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getResourceCondition_Path()
  {
    return (EAttribute)resourceConditionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCheckAndEnforceCondition()
  {
    return checkAndEnforceConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCheckAndEnforceCondition_CheckExpression()
  {
    return (EReference)checkAndEnforceConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCheckAndEnforceCondition_EnforceExpression()
  {
    return (EReference)checkAndEnforceConditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCheckExpression()
  {
    return checkExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEnforceExpression()
  {
    return enforceExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBidirectionalizableCondition()
  {
    return bidirectionalizableConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBidirectionalizableCondition_FeatureToBeAssigned()
  {
    return (EReference)bidirectionalizableConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBidirectionalizableCondition_BidirectionalizableExpression()
  {
    return (EReference)bidirectionalizableConditionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBidirectionalizableCondition_FeatureToBeUpdated()
  {
    return (EReference)bidirectionalizableConditionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBidirectionalizableExpression()
  {
    return bidirectionalizableExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUnidirectionalExpression()
  {
    return unidirectionalExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBootstrapping()
  {
    return bootstrappingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBootstrapping_Name()
  {
    return (EAttribute)bootstrappingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBootstrapping_Parameters()
  {
    return (EReference)bootstrappingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBootstrapping_BootstrapConditon()
  {
    return (EReference)bootstrappingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCodeBlock()
  {
    return codeBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCodeBlock_Code()
  {
    return (EReference)codeBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDocumentable()
  {
    return documentableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDocumentable_Documentation()
  {
    return (EAttribute)documentableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMetaclassFeatureReference()
  {
    return metaclassFeatureReferenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getNumCompareOperator()
  {
    return numCompareOperatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getMultiValueConditionOperator()
  {
    return multiValueConditionOperatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MappingsLanguageFactory getMappingsLanguageFactory()
  {
    return (MappingsLanguageFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    mappingsFileEClass = createEClass(MAPPINGS_FILE);
    createEReference(mappingsFileEClass, MAPPINGS_FILE__NAMESPACE_IMPORTS);
    createEReference(mappingsFileEClass, MAPPINGS_FILE__MAPPINGS_SEGMENTS);

    mappingsSegmentEClass = createEClass(MAPPINGS_SEGMENT);
    createEAttribute(mappingsSegmentEClass, MAPPINGS_SEGMENT__NAME);
    createEReference(mappingsSegmentEClass, MAPPINGS_SEGMENT__LEFT_DOMAIN);
    createEReference(mappingsSegmentEClass, MAPPINGS_SEGMENT__RIGHT_DOMAIN);
    createEReference(mappingsSegmentEClass, MAPPINGS_SEGMENT__MAPPINGS);
    createEReference(mappingsSegmentEClass, MAPPINGS_SEGMENT__BOOTSTRAPPINGS);

    mappingEClass = createEClass(MAPPING);
    createEAttribute(mappingEClass, MAPPING__NAME);
    createEReference(mappingEClass, MAPPING__DEPENDENCIES);
    createEReference(mappingEClass, MAPPING__LEFT_PARAMETERS);
    createEReference(mappingEClass, MAPPING__LEFT_CONDITIONS);
    createEReference(mappingEClass, MAPPING__RIGHT_PARAMETERS);
    createEReference(mappingEClass, MAPPING__RIGHT_CONDITIONS);
    createEReference(mappingEClass, MAPPING__BIDIRECTIONALIZABLE_CONDITIONS);
    createEReference(mappingEClass, MAPPING__FORWARD_EXECUTION_EXPRESSION);
    createEReference(mappingEClass, MAPPING__BACKWARD_EXECUTION_EXPRESSION);

    dependencyEClass = createEClass(DEPENDENCY);
    createEReference(dependencyEClass, DEPENDENCY__MAPPING);
    createEAttribute(dependencyEClass, DEPENDENCY__SHORT_NAME);

    singleSidedConditionEClass = createEClass(SINGLE_SIDED_CONDITION);

    enforceableConditionEClass = createEClass(ENFORCEABLE_CONDITION);

    featureConditionEClass = createEClass(FEATURE_CONDITION);
    createEReference(featureConditionEClass, FEATURE_CONDITION__FEATURE);

    featureReferenceEClass = createEClass(FEATURE_REFERENCE);

    dependentFeatureReferenceEClass = createEClass(DEPENDENT_FEATURE_REFERENCE);
    createEReference(dependentFeatureReferenceEClass, DEPENDENT_FEATURE_REFERENCE__DEPENDEE_SHORT_NAME);
    createEReference(dependentFeatureReferenceEClass, DEPENDENT_FEATURE_REFERENCE__DEPENDEE_FEATURE);

    singleValueConditionEClass = createEClass(SINGLE_VALUE_CONDITION);

    valueConditionEClass = createEClass(VALUE_CONDITION);
    createEReference(valueConditionEClass, VALUE_CONDITION__VALUE_EXPRESSION);

    valueExpressionEClass = createEClass(VALUE_EXPRESSION);

    indexConditionEClass = createEClass(INDEX_CONDITION);
    createEAttribute(indexConditionEClass, INDEX_CONDITION__NEGATED);
    createEReference(indexConditionEClass, INDEX_CONDITION__INDEX_VALUE_EXPRESSION);

    numCompareConditionEClass = createEClass(NUM_COMPARE_CONDITION);
    createEAttribute(numCompareConditionEClass, NUM_COMPARE_CONDITION__OPERATOR);

    multiValueConditionEClass = createEClass(MULTI_VALUE_CONDITION);
    createEAttribute(multiValueConditionEClass, MULTI_VALUE_CONDITION__NEGATED);
    createEAttribute(multiValueConditionEClass, MULTI_VALUE_CONDITION__OPERATOR);

    elementConditionEClass = createEClass(ELEMENT_CONDITION);
    createEReference(elementConditionEClass, ELEMENT_CONDITION__ELEMENT_EXPRESSION);

    elementExpressionEClass = createEClass(ELEMENT_EXPRESSION);

    notEmptyConditionEClass = createEClass(NOT_EMPTY_CONDITION);
    createEAttribute(notEmptyConditionEClass, NOT_EMPTY_CONDITION__NEGATED);

    resourceConditionEClass = createEClass(RESOURCE_CONDITION);
    createEReference(resourceConditionEClass, RESOURCE_CONDITION__ELEMENT_EXPRESSION);
    createEReference(resourceConditionEClass, RESOURCE_CONDITION__PATH_EXPRESSION);
    createEAttribute(resourceConditionEClass, RESOURCE_CONDITION__PATH);

    checkAndEnforceConditionEClass = createEClass(CHECK_AND_ENFORCE_CONDITION);
    createEReference(checkAndEnforceConditionEClass, CHECK_AND_ENFORCE_CONDITION__CHECK_EXPRESSION);
    createEReference(checkAndEnforceConditionEClass, CHECK_AND_ENFORCE_CONDITION__ENFORCE_EXPRESSION);

    checkExpressionEClass = createEClass(CHECK_EXPRESSION);

    enforceExpressionEClass = createEClass(ENFORCE_EXPRESSION);

    bidirectionalizableConditionEClass = createEClass(BIDIRECTIONALIZABLE_CONDITION);
    createEReference(bidirectionalizableConditionEClass, BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED);
    createEReference(bidirectionalizableConditionEClass, BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION);
    createEReference(bidirectionalizableConditionEClass, BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED);

    bidirectionalizableExpressionEClass = createEClass(BIDIRECTIONALIZABLE_EXPRESSION);

    unidirectionalExpressionEClass = createEClass(UNIDIRECTIONAL_EXPRESSION);

    bootstrappingEClass = createEClass(BOOTSTRAPPING);
    createEAttribute(bootstrappingEClass, BOOTSTRAPPING__NAME);
    createEReference(bootstrappingEClass, BOOTSTRAPPING__PARAMETERS);
    createEReference(bootstrappingEClass, BOOTSTRAPPING__BOOTSTRAP_CONDITON);

    codeBlockEClass = createEClass(CODE_BLOCK);
    createEReference(codeBlockEClass, CODE_BLOCK__CODE);

    documentableEClass = createEClass(DOCUMENTABLE);
    createEAttribute(documentableEClass, DOCUMENTABLE__DOCUMENTATION);

    metaclassFeatureReferenceEClass = createEClass(METACLASS_FEATURE_REFERENCE);

    // Create enums
    numCompareOperatorEEnum = createEEnum(NUM_COMPARE_OPERATOR);
    multiValueConditionOperatorEEnum = createEEnum(MULTI_VALUE_CONDITION_OPERATOR);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    MirBasePackage theMirBasePackage = (MirBasePackage)EPackage.Registry.INSTANCE.getEPackage(MirBasePackage.eNS_URI);
    XtypePackage theXtypePackage = (XtypePackage)EPackage.Registry.INSTANCE.getEPackage(XtypePackage.eNS_URI);
    XbasePackage theXbasePackage = (XbasePackage)EPackage.Registry.INSTANCE.getEPackage(XbasePackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    mappingsFileEClass.getESuperTypes().add(theMirBasePackage.getMirBaseFile());
    mappingsSegmentEClass.getESuperTypes().add(this.getDocumentable());
    enforceableConditionEClass.getESuperTypes().add(this.getSingleSidedCondition());
    featureConditionEClass.getESuperTypes().add(this.getEnforceableCondition());
    dependentFeatureReferenceEClass.getESuperTypes().add(this.getFeatureReference());
    singleValueConditionEClass.getESuperTypes().add(this.getFeatureCondition());
    indexConditionEClass.getESuperTypes().add(this.getSingleValueCondition());
    numCompareConditionEClass.getESuperTypes().add(this.getSingleValueCondition());
    multiValueConditionEClass.getESuperTypes().add(this.getFeatureCondition());
    elementConditionEClass.getESuperTypes().add(this.getFeatureCondition());
    notEmptyConditionEClass.getESuperTypes().add(this.getFeatureCondition());
    resourceConditionEClass.getESuperTypes().add(this.getEnforceableCondition());
    checkAndEnforceConditionEClass.getESuperTypes().add(this.getSingleSidedCondition());
    codeBlockEClass.getESuperTypes().add(this.getValueExpression());
    codeBlockEClass.getESuperTypes().add(this.getElementExpression());
    codeBlockEClass.getESuperTypes().add(this.getCheckExpression());
    codeBlockEClass.getESuperTypes().add(this.getEnforceExpression());
    codeBlockEClass.getESuperTypes().add(this.getBidirectionalizableExpression());
    codeBlockEClass.getESuperTypes().add(this.getUnidirectionalExpression());
    metaclassFeatureReferenceEClass.getESuperTypes().add(this.getFeatureReference());

    // Initialize classes and features; add operations and parameters
    initEClass(mappingsFileEClass, MappingsFile.class, "MappingsFile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMappingsFile_NamespaceImports(), theXtypePackage.getXImportSection(), null, "namespaceImports", null, 0, 1, MappingsFile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMappingsFile_MappingsSegments(), this.getMappingsSegment(), null, "mappingsSegments", null, 0, -1, MappingsFile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingsSegmentEClass, MappingsSegment.class, "MappingsSegment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMappingsSegment_Name(), ecorePackage.getEString(), "name", null, 0, 1, MappingsSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMappingsSegment_LeftDomain(), theMirBasePackage.getDomainReference(), null, "leftDomain", null, 0, 1, MappingsSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMappingsSegment_RightDomain(), theMirBasePackage.getDomainReference(), null, "rightDomain", null, 0, 1, MappingsSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMappingsSegment_Mappings(), this.getMapping(), null, "mappings", null, 0, -1, MappingsSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMappingsSegment_Bootstrappings(), this.getBootstrapping(), null, "bootstrappings", null, 0, -1, MappingsSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingEClass, Mapping.class, "Mapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMapping_Name(), ecorePackage.getEString(), "name", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_Dependencies(), this.getDependency(), null, "dependencies", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_LeftParameters(), theMirBasePackage.getNamedMetaclassReference(), null, "leftParameters", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_LeftConditions(), this.getSingleSidedCondition(), null, "leftConditions", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_RightParameters(), theMirBasePackage.getNamedMetaclassReference(), null, "rightParameters", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_RightConditions(), this.getSingleSidedCondition(), null, "rightConditions", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_BidirectionalizableConditions(), this.getBidirectionalizableCondition(), null, "bidirectionalizableConditions", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_ForwardExecutionExpression(), this.getUnidirectionalExpression(), null, "forwardExecutionExpression", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_BackwardExecutionExpression(), this.getUnidirectionalExpression(), null, "backwardExecutionExpression", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dependencyEClass, Dependency.class, "Dependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDependency_Mapping(), this.getMapping(), null, "mapping", null, 0, 1, Dependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDependency_ShortName(), ecorePackage.getEString(), "shortName", null, 0, 1, Dependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleSidedConditionEClass, SingleSidedCondition.class, "SingleSidedCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(enforceableConditionEClass, EnforceableCondition.class, "EnforceableCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(featureConditionEClass, FeatureCondition.class, "FeatureCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFeatureCondition_Feature(), theMirBasePackage.getMetaclassFeatureReference(), null, "feature", null, 0, 1, FeatureCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(featureReferenceEClass, FeatureReference.class, "FeatureReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dependentFeatureReferenceEClass, DependentFeatureReference.class, "DependentFeatureReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDependentFeatureReference_DependeeShortName(), this.getDependency(), null, "dependeeShortName", null, 0, 1, DependentFeatureReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDependentFeatureReference_DependeeFeature(), theMirBasePackage.getMetaclassFeatureReference(), null, "dependeeFeature", null, 0, 1, DependentFeatureReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleValueConditionEClass, SingleValueCondition.class, "SingleValueCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(valueConditionEClass, ValueCondition.class, "ValueCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getValueCondition_ValueExpression(), this.getValueExpression(), null, "valueExpression", null, 0, 1, ValueCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueExpressionEClass, ValueExpression.class, "ValueExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(indexConditionEClass, IndexCondition.class, "IndexCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIndexCondition_Negated(), ecorePackage.getEBoolean(), "negated", null, 0, 1, IndexCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexCondition_IndexValueExpression(), this.getValueExpression(), null, "indexValueExpression", null, 0, 1, IndexCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numCompareConditionEClass, NumCompareCondition.class, "NumCompareCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumCompareCondition_Operator(), this.getNumCompareOperator(), "operator", null, 0, 1, NumCompareCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiValueConditionEClass, MultiValueCondition.class, "MultiValueCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMultiValueCondition_Negated(), ecorePackage.getEBoolean(), "negated", null, 0, 1, MultiValueCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultiValueCondition_Operator(), this.getMultiValueConditionOperator(), "operator", null, 0, 1, MultiValueCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(elementConditionEClass, ElementCondition.class, "ElementCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getElementCondition_ElementExpression(), this.getElementExpression(), null, "elementExpression", null, 0, 1, ElementCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(elementExpressionEClass, ElementExpression.class, "ElementExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(notEmptyConditionEClass, NotEmptyCondition.class, "NotEmptyCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNotEmptyCondition_Negated(), ecorePackage.getEBoolean(), "negated", null, 0, 1, NotEmptyCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(resourceConditionEClass, ResourceCondition.class, "ResourceCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getResourceCondition_ElementExpression(), this.getElementExpression(), null, "elementExpression", null, 0, 1, ResourceCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getResourceCondition_PathExpression(), this.getElementExpression(), null, "pathExpression", null, 0, 1, ResourceCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResourceCondition_Path(), ecorePackage.getEString(), "path", null, 0, 1, ResourceCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(checkAndEnforceConditionEClass, CheckAndEnforceCondition.class, "CheckAndEnforceCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCheckAndEnforceCondition_CheckExpression(), this.getCheckExpression(), null, "checkExpression", null, 0, 1, CheckAndEnforceCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCheckAndEnforceCondition_EnforceExpression(), this.getCheckExpression(), null, "enforceExpression", null, 0, 1, CheckAndEnforceCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(checkExpressionEClass, CheckExpression.class, "CheckExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(enforceExpressionEClass, EnforceExpression.class, "EnforceExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bidirectionalizableConditionEClass, BidirectionalizableCondition.class, "BidirectionalizableCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBidirectionalizableCondition_FeatureToBeAssigned(), theMirBasePackage.getMetaclassFeatureReference(), null, "featureToBeAssigned", null, 0, 1, BidirectionalizableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBidirectionalizableCondition_BidirectionalizableExpression(), this.getBidirectionalizableExpression(), null, "bidirectionalizableExpression", null, 0, 1, BidirectionalizableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBidirectionalizableCondition_FeatureToBeUpdated(), theMirBasePackage.getMetaclassFeatureReference(), null, "featureToBeUpdated", null, 0, 1, BidirectionalizableCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bidirectionalizableExpressionEClass, BidirectionalizableExpression.class, "BidirectionalizableExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(unidirectionalExpressionEClass, UnidirectionalExpression.class, "UnidirectionalExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bootstrappingEClass, Bootstrapping.class, "Bootstrapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBootstrapping_Name(), ecorePackage.getEString(), "name", null, 0, 1, Bootstrapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBootstrapping_Parameters(), theMirBasePackage.getNamedMetaclassReference(), null, "parameters", null, 0, -1, Bootstrapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBootstrapping_BootstrapConditon(), this.getSingleSidedCondition(), null, "bootstrapConditon", null, 0, 1, Bootstrapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(codeBlockEClass, CodeBlock.class, "CodeBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCodeBlock_Code(), theXbasePackage.getXExpression(), null, "code", null, 0, 1, CodeBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(documentableEClass, Documentable.class, "Documentable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDocumentable_Documentation(), ecorePackage.getEString(), "documentation", null, 0, 1, Documentable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(metaclassFeatureReferenceEClass, MetaclassFeatureReference.class, "MetaclassFeatureReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Initialize enums and add enum literals
    initEEnum(numCompareOperatorEEnum, NumCompareOperator.class, "NumCompareOperator");
    addEEnumLiteral(numCompareOperatorEEnum, NumCompareOperator.NOT_GREATER);
    addEEnumLiteral(numCompareOperatorEEnum, NumCompareOperator.LESS);
    addEEnumLiteral(numCompareOperatorEEnum, NumCompareOperator.NOT_LESS);
    addEEnumLiteral(numCompareOperatorEEnum, NumCompareOperator.GREATER);

    initEEnum(multiValueConditionOperatorEEnum, MultiValueConditionOperator.class, "MultiValueConditionOperator");
    addEEnumLiteral(multiValueConditionOperatorEEnum, MultiValueConditionOperator.EQUALS);
    addEEnumLiteral(multiValueConditionOperatorEEnum, MultiValueConditionOperator.IN);

    // Create resource
    createResource(eNS_URI);
  }

} //MappingsLanguagePackageImpl
