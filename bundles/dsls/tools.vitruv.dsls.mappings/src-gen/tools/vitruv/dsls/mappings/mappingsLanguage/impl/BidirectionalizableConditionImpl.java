/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tools.vitruv.dsls.mappings.mappingsLanguage.BidirectionalizableCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.BidirectionalizableExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;

import tools.vitruv.dsls.mirbase.mirBase.MetaclassFeatureReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bidirectionalizable Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.BidirectionalizableConditionImpl#getFeatureToBeAssigned <em>Feature To Be Assigned</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.BidirectionalizableConditionImpl#getBidirectionalizableExpression <em>Bidirectionalizable Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.BidirectionalizableConditionImpl#getFeatureToBeUpdated <em>Feature To Be Updated</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BidirectionalizableConditionImpl extends MinimalEObjectImpl.Container implements BidirectionalizableCondition
{
  /**
   * The cached value of the '{@link #getFeatureToBeAssigned() <em>Feature To Be Assigned</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatureToBeAssigned()
   * @generated
   * @ordered
   */
  protected MetaclassFeatureReference featureToBeAssigned;

  /**
   * The cached value of the '{@link #getBidirectionalizableExpression() <em>Bidirectionalizable Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBidirectionalizableExpression()
   * @generated
   * @ordered
   */
  protected BidirectionalizableExpression bidirectionalizableExpression;

  /**
   * The cached value of the '{@link #getFeatureToBeUpdated() <em>Feature To Be Updated</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatureToBeUpdated()
   * @generated
   * @ordered
   */
  protected MetaclassFeatureReference featureToBeUpdated;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BidirectionalizableConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingsLanguagePackage.Literals.BIDIRECTIONALIZABLE_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaclassFeatureReference getFeatureToBeAssigned()
  {
    return featureToBeAssigned;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFeatureToBeAssigned(MetaclassFeatureReference newFeatureToBeAssigned, NotificationChain msgs)
  {
    MetaclassFeatureReference oldFeatureToBeAssigned = featureToBeAssigned;
    featureToBeAssigned = newFeatureToBeAssigned;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED, oldFeatureToBeAssigned, newFeatureToBeAssigned);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFeatureToBeAssigned(MetaclassFeatureReference newFeatureToBeAssigned)
  {
    if (newFeatureToBeAssigned != featureToBeAssigned)
    {
      NotificationChain msgs = null;
      if (featureToBeAssigned != null)
        msgs = ((InternalEObject)featureToBeAssigned).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED, null, msgs);
      if (newFeatureToBeAssigned != null)
        msgs = ((InternalEObject)newFeatureToBeAssigned).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED, null, msgs);
      msgs = basicSetFeatureToBeAssigned(newFeatureToBeAssigned, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED, newFeatureToBeAssigned, newFeatureToBeAssigned));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BidirectionalizableExpression getBidirectionalizableExpression()
  {
    return bidirectionalizableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBidirectionalizableExpression(BidirectionalizableExpression newBidirectionalizableExpression, NotificationChain msgs)
  {
    BidirectionalizableExpression oldBidirectionalizableExpression = bidirectionalizableExpression;
    bidirectionalizableExpression = newBidirectionalizableExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION, oldBidirectionalizableExpression, newBidirectionalizableExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBidirectionalizableExpression(BidirectionalizableExpression newBidirectionalizableExpression)
  {
    if (newBidirectionalizableExpression != bidirectionalizableExpression)
    {
      NotificationChain msgs = null;
      if (bidirectionalizableExpression != null)
        msgs = ((InternalEObject)bidirectionalizableExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION, null, msgs);
      if (newBidirectionalizableExpression != null)
        msgs = ((InternalEObject)newBidirectionalizableExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION, null, msgs);
      msgs = basicSetBidirectionalizableExpression(newBidirectionalizableExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION, newBidirectionalizableExpression, newBidirectionalizableExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaclassFeatureReference getFeatureToBeUpdated()
  {
    return featureToBeUpdated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFeatureToBeUpdated(MetaclassFeatureReference newFeatureToBeUpdated, NotificationChain msgs)
  {
    MetaclassFeatureReference oldFeatureToBeUpdated = featureToBeUpdated;
    featureToBeUpdated = newFeatureToBeUpdated;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED, oldFeatureToBeUpdated, newFeatureToBeUpdated);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFeatureToBeUpdated(MetaclassFeatureReference newFeatureToBeUpdated)
  {
    if (newFeatureToBeUpdated != featureToBeUpdated)
    {
      NotificationChain msgs = null;
      if (featureToBeUpdated != null)
        msgs = ((InternalEObject)featureToBeUpdated).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED, null, msgs);
      if (newFeatureToBeUpdated != null)
        msgs = ((InternalEObject)newFeatureToBeUpdated).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED, null, msgs);
      msgs = basicSetFeatureToBeUpdated(newFeatureToBeUpdated, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED, newFeatureToBeUpdated, newFeatureToBeUpdated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED:
        return basicSetFeatureToBeAssigned(null, msgs);
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION:
        return basicSetBidirectionalizableExpression(null, msgs);
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED:
        return basicSetFeatureToBeUpdated(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED:
        return getFeatureToBeAssigned();
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION:
        return getBidirectionalizableExpression();
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED:
        return getFeatureToBeUpdated();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED:
        setFeatureToBeAssigned((MetaclassFeatureReference)newValue);
        return;
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION:
        setBidirectionalizableExpression((BidirectionalizableExpression)newValue);
        return;
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED:
        setFeatureToBeUpdated((MetaclassFeatureReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED:
        setFeatureToBeAssigned((MetaclassFeatureReference)null);
        return;
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION:
        setBidirectionalizableExpression((BidirectionalizableExpression)null);
        return;
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED:
        setFeatureToBeUpdated((MetaclassFeatureReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_ASSIGNED:
        return featureToBeAssigned != null;
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__BIDIRECTIONALIZABLE_EXPRESSION:
        return bidirectionalizableExpression != null;
      case MappingsLanguagePackage.BIDIRECTIONALIZABLE_CONDITION__FEATURE_TO_BE_UPDATED:
        return featureToBeUpdated != null;
    }
    return super.eIsSet(featureID);
  }

} //BidirectionalizableConditionImpl
