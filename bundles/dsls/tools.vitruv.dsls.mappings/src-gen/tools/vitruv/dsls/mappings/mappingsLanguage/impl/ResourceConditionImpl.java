/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.mappings.mappingsLanguage.ElementExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;
import tools.vitruv.dsls.mappings.mappingsLanguage.ResourceCondition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Resource Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.ResourceConditionImpl#getElementExpression <em>Element Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.ResourceConditionImpl#getPathExpression <em>Path Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.ResourceConditionImpl#getPath <em>Path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ResourceConditionImpl extends EnforceableConditionImpl implements ResourceCondition
{
  /**
   * The cached value of the '{@link #getElementExpression() <em>Element Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementExpression()
   * @generated
   * @ordered
   */
  protected ElementExpression elementExpression;

  /**
   * The cached value of the '{@link #getPathExpression() <em>Path Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathExpression()
   * @generated
   * @ordered
   */
  protected ElementExpression pathExpression;

  /**
   * The default value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected static final String PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected String path = PATH_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourceConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingsLanguagePackage.Literals.RESOURCE_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementExpression getElementExpression()
  {
    return elementExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementExpression(ElementExpression newElementExpression, NotificationChain msgs)
  {
    ElementExpression oldElementExpression = elementExpression;
    elementExpression = newElementExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION, oldElementExpression, newElementExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElementExpression(ElementExpression newElementExpression)
  {
    if (newElementExpression != elementExpression)
    {
      NotificationChain msgs = null;
      if (elementExpression != null)
        msgs = ((InternalEObject)elementExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION, null, msgs);
      if (newElementExpression != null)
        msgs = ((InternalEObject)newElementExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION, null, msgs);
      msgs = basicSetElementExpression(newElementExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION, newElementExpression, newElementExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementExpression getPathExpression()
  {
    return pathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPathExpression(ElementExpression newPathExpression, NotificationChain msgs)
  {
    ElementExpression oldPathExpression = pathExpression;
    pathExpression = newPathExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION, oldPathExpression, newPathExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPathExpression(ElementExpression newPathExpression)
  {
    if (newPathExpression != pathExpression)
    {
      NotificationChain msgs = null;
      if (pathExpression != null)
        msgs = ((InternalEObject)pathExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION, null, msgs);
      if (newPathExpression != null)
        msgs = ((InternalEObject)newPathExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION, null, msgs);
      msgs = basicSetPathExpression(newPathExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION, newPathExpression, newPathExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPath()
  {
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPath(String newPath)
  {
    String oldPath = path;
    path = newPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.RESOURCE_CONDITION__PATH, oldPath, path));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION:
        return basicSetElementExpression(null, msgs);
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION:
        return basicSetPathExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION:
        return getElementExpression();
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION:
        return getPathExpression();
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH:
        return getPath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION:
        setElementExpression((ElementExpression)newValue);
        return;
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION:
        setPathExpression((ElementExpression)newValue);
        return;
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH:
        setPath((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION:
        setElementExpression((ElementExpression)null);
        return;
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION:
        setPathExpression((ElementExpression)null);
        return;
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH:
        setPath(PATH_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.RESOURCE_CONDITION__ELEMENT_EXPRESSION:
        return elementExpression != null;
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH_EXPRESSION:
        return pathExpression != null;
      case MappingsLanguagePackage.RESOURCE_CONDITION__PATH:
        return PATH_EDEFAULT == null ? path != null : !PATH_EDEFAULT.equals(path);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (path: ");
    result.append(path);
    result.append(')');
    return result.toString();
  }

} //ResourceConditionImpl
