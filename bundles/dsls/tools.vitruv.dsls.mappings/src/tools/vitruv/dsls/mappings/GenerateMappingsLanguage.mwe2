module tools.vitruv.dsls.mappings.GenerateMappingsLanguage

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

// TODO MK: refactor commonalities with GenerateReactionsLanguage.mwe2 if possible
var projectName = "tools.vitruv.dsls.mappings"
var languageName = "MappingsLanguage"
var fileExtension = "mappings"

var rootPath = ".."
var qualifiedLanguageName = "${projectName}.${languageName}"
var runtimeProject = "../${projectName}"
var testProjectPath = "../../../tests/dsls/${projectName}"

Workflow {
	bean = StandaloneSetup {
    	scanClassPath = true
    	platformUri = "${runtimeProject}/.."
    	// The following two lines can be removed, if Xbase is not used.
    	registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
    	registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
    	registerGenModelFile = "platform:/resource/tools.vitruv.dsls.mirbase/model/generated/MirBase.genmodel"
    	
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/model/generated"
    }
    
    component = DirectoryCleaner {
    	directory = "${testProjectPath}.ui/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${testProjectPath}.tests/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${testProjectPath}.ui.tests/src-gen"
    }
    
	component = postprocessor.MappingsLanguageExtendedGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = "${testProjectPath}.tests"
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
					root = "${testProjectPath}.ui.tests"
				}
				createEclipseMetaData = true
				
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		cleaner = {
			enabled = false
		}
		language = StandardLanguage {
			name = qualifiedLanguageName
			fileExtensions = fileExtension
			junitSupport = junit.Junit4Fragment2 {
				generateStub = false
			}
		}
	}
}
