/*
 * generated by Xtext 2.9.0
 */
package tools.vitruv.dsls.reactions

import com.google.inject.Binder
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.xtext.linking.ILinkingService
import tools.vitruv.dsls.reactions.linking.ReactionsLinkingService
import org.eclipse.xtext.generator.IGenerator2
import tools.vitruv.dsls.reactions.generator.ReactionsLanguageGenerator
import tools.vitruv.dsls.reactions.generator.InternalReactionsGenerator
import tools.vitruv.dsls.reactions.api.generator.IReactionsGenerator
import tools.vitruv.dsls.reactions.generator.ExternalReactionsGenerator
import tools.vitruv.dsls.reactions.builder.FluentReactionsLanguageBuilder
import tools.vitruv.dsls.common.elements.CommonLanguageElementsQualifiedNameConverter

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class ReactionsLanguageRuntimeModule extends AbstractReactionsLanguageRuntimeModule {

	override Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return CommonLanguageElementsQualifiedNameConverter;
	}

	override Class<? extends ILinkingService> bindILinkingService() {
		return ReactionsLinkingService;
	}

	def Class<? extends IGenerator2> bindIGenerator2() {
		ReactionsLanguageGenerator
	}

	def Class<? extends IReactionsGenerator> bindIReactionsGenerator() {
		InternalReactionsGenerator
	}

	override configure(Binder binder) {
		super.configure(binder);
		binder.bind(IGenerator2).to(bindIGenerator2())
		binder.bind(IReactionsGenerator).to(bindIReactionsGenerator())

		binder.requestStaticInjection(ExternalReactionsGenerator)
		binder.requestStaticInjection(FluentReactionsLanguageBuilder)
	}

}
