grammar tools.vitruv.dsls.reactions.ReactionsLanguage with tools.vitruv.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate reactionsLanguage "http://vitruv.tools/dsls/reactions/ReactionsLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase


ReactionsFile:
	(namespaceImports=XImportSection)?
	MirBaseFile
	(reactionsSegments+=ReactionsSegment)+;

ReactionsSegment:
	'reactions:' name=ValidID
	'in' 'reaction' 'to' 'changes' 'in' fromDomain=DomainReference 
	'execute' 'actions' 'in' toDomain=DomainReference
	(reactionsImports+=ReactionsImport)*
	(reactions+=Reaction |
		routines+=Routine)*;

ReactionsImport:
	'import' (routinesOnly?='routines')? importedReactionsSegment=[ReactionsSegment] (useQualifiedNames?='using' 'qualified' 'names')?;

// *********************************
// *********** REACTIONS ***********
// *********************************

Reaction:
	(documentation=ML_COMMENT)?
	'reaction' (overriddenReactionsSegment=[ReactionsSegment] '::')? name=ValidID '{'
		trigger=Trigger
		callRoutine=ReactionRoutineCall
	'}';
	
ReactionRoutineCall:
	{ReactionRoutineCall}
	RoutineCallBlock;

// *********** TRIGGER ***********

InvariantViolationEvent:
	'invariant' violation=[ecore::EClass|QualifiedName];

Trigger:
	// TODO HK Extend this by "before" executing the transformation before applying the change
	'after' (ModelChange | InvariantViolationEvent)
	('with' precondition=PreconditionCodeBlock)?;

ModelChange:
	ArbitraryModelChange | ConcreteModelChange;

ConcreteModelChange:
	ModelElementChange | ModelAttributeChange;

ModelElementChange:
	'element' (elementType=UnnamedMetaclassReference)? changeType=ElementChangeType;


ModelAttributeChange:
	'attribute' ({ModelAttributeInsertedChange} 'inserted' 'in' |
		{ModelAttributeRemovedChange} 'removed' 'from' |
		{ModelAttributeReplacedChange} 'replaced' 'at')
		feature=MetaclassEAttributeReference;

ArbitraryModelChange:
	{ArbitraryModelChange} 'anychange';


// *********** Atomic element changes ***********

ElementExistenceChangeType returns ElementExistenceChangeType:
	ElementCreationChangeType | ElementDeletionChangeType;

ElementUsageChangeType returns ModelElementUsageChangeType:
	ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType;

ElementCreationChangeType returns ElementCreationChangeType:
	'created' {ElementCreationChangeType};

ElementDeletionChangeType returns ElementDeletionChangeType:
	'deleted' {ElementDeletionChangeType};

fragment ElementReferenceChangeType:
	feature=MetaclassEReferenceReference;

// This is just for a complete type hierachy
ElementRootChangeType returns ElementRootChangeType:
	ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType;

ElementInsertionChangeType:
	(ElementInsertionInListChangeType | ElementInsertionAsRootChangeType);

ElementInsertionInListChangeType:
	'inserted' 'in' ElementReferenceChangeType;

ElementInsertionAsRootChangeType:
	{ElementInsertionAsRootChangeType} 'inserted' 'as' 'root';

ElementRemovalChangeType:
	(ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType);
	
ElementRemovalAsRootChangeType:
	{ElementRemovalAsRootChangeType} 'removed' 'as' 'root';
		
ElementRemovalFromListChangeType:
	'removed' 'from' ElementReferenceChangeType;

ElementReplacementChangeType:
	'replaced' 'at' ElementReferenceChangeType;

// *********** Compound element changes ***********

ElementCreationAndInsertionChangeType:
	createChange=ElementCreationChangeType 'and' insertChange=ElementInsertionChangeType;

ElementDeletionAndRemovalChangeType:
	deleteChange=ElementDeletionChangeType 'and' removeChange=ElementRemovalChangeType;
	
ElementDeletionAndCreationAndReplacementChangeType:
	deleteChange=ElementDeletionChangeType 'and' createChange=ElementCreationChangeType 'and' replacedChange=ElementReplacementChangeType;

ElementChangeType returns ElementChangeType:
	ElementExistenceChangeType | ElementUsageChangeType | ElementCompoundChangeType;

ElementCompoundChangeType returns ElementCompoundChangeType:
	ElementCreationAndInsertionChangeType | ElementDeletionAndRemovalChangeType | ElementDeletionAndCreationAndReplacementChangeType;


// ***************************************
// *********** REPAIR ROUTINES ***********
// ***************************************

Routine:
	(documentation=ML_COMMENT)?
	'routine' (overrideImportPath=RoutineOverrideImportPath '::')? name=ValidID input=RoutineInput '{'
		matcher=MatcherBlock?
		action=ActionBlock
	'}';

RoutineOverrideImportPath:
	reactionsSegment=[ReactionsSegment] ({RoutineOverrideImportPath.parent=current} '.' reactionsSegment=[ReactionsSegment])*;

RoutineInput:
	{RoutineInput}
	'(' ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		(',' (modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)? ')';

// *********** MATCHER ***********

MatcherBlock returns Matcher:
	{Matcher}
	'match' '{'
		(matcherStatements+=MatcherStatement)+
	'}';

MatcherStatement:
	RetrieveOrRequireAbscenceOfModelElement | MatcherCheckStatement;

RetrieveOrRequireAbscenceOfModelElement:
	(RequireAbscenceOfModelElement | RetrieveModelElement) MetaclassReference 
	'corresponding' 'to' correspondenceSource=CorrespondingObjectCodeBlock ('tagged' 'with' Taggable)? 
	('with' precondition=PreconditionCodeBlock)?; 

RequireAbscenceOfModelElement returns RequireAbscenceOfModelElement:
	{RequireAbscenceOfModelElement}
	'require' 'absence' 'of';
	
RetrieveModelElement:
	('val' name=ValidID '=')? 'retrieve' retrievalType=RetrieveModelElementTypeStatement;


RetrieveModelElementTypeStatement returns RetrieveModelElementType:
	{RetrieveOneModelElement} (optional?='optional' | asserted?='asserted')? |
	{RetrieveManyModelElements} 'many';

enum RetrieveOneElementType:
	optional='optional' | asserted='asserted' ;

MatcherCheckStatement:
	{MatcherCheckStatement}
	'check' (asserted?='asserted')? CodeBlock;
	
// *********** EFFECTS ***********

ActionBlock returns Action:
	{Action}
	'action' '{'
		(actionStatements+=ActionStatement)+
	'}';

RoutineCallStatement returns RoutineCallStatement:
	{RoutineCallStatement}
	RoutineCallBlock;

ActionStatement:
	CreateModelElementStatement | DeleteModelElementStatement | UpdateModelElementStatement | CreateCorrespondenceStatement | RemoveCorrespondenceStatement | ExecuteActionStatement | RoutineCallStatement;

ExecuteActionStatement returns ExecuteActionStatement:
	{ExecuteActionStatement}
	'execute' CodeBlock;

CreateModelElementStatement returns CreateModelElement:
	{CreateModelElement}
	'val' name=ValidID '=' 'create' MetaclassReference ('and' 'initialize' initializationBlock=ExecutionCodeBlock)?;
	
DeleteModelElementStatement returns DeleteModelElement:
	{DeleteModelElement}
	"delete" element=ExistingElementReference;

UpdateModelElementStatement returns UpdateModelElement:
	{UpdateModelElement}
	'update' element=ExistingElementReference updateBlock=ExecutionCodeBlock;

CreateCorrespondenceStatement returns CreateCorrespondence:
	{CreateCorrespondence}
	'add' 'correspondence' 'between' firstElement=ExistingElementReference 'and' secondElement=ExistingElementReference
	('tagged' 'with' Taggable)?;
	
RemoveCorrespondenceStatement returns RemoveCorrespondence:
	{RemoveCorrespondence}
	'remove' 'correspondence' 'between' firstElement=ExistingElementReference 'and' secondElement=ExistingElementReference
	('tagged' 'with' Taggable)?;


// ****** CODE BLOCKS ******

fragment CodeBlock:
	code=XExpression;

fragment RoutineCallBlock:
	'call' CodeBlock;

fragment Taggable:
	tag=TagCodeBlock;

ExistingElementReference:
	CodeBlock;

TagCodeBlock returns TagCodeBlock:
	{TagCodeBlock}
	CodeBlock;

PreconditionCodeBlock returns PreconditionCodeBlock:
	{PreconditionCodeBlock}
	CodeBlock;

CorrespondingObjectCodeBlock returns CorrespondingObjectCodeBlock:
	{CorrespondingObjectCodeBlock}
	CodeBlock;

ExecutionCodeBlock returns ExecutionCodeBlock:
	{ExecutionCodeBlock}
	CodeBlock;
