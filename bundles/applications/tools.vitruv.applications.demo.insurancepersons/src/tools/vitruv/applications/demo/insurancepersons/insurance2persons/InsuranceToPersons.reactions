import edu.kit.ipd.sdq.metamodels.insurance.Gender
import edu.kit.ipd.sdq.metamodels.persons.Male
import edu.kit.ipd.sdq.metamodels.persons.Female

import static extension tools.vitruv.applications.demo.insurancepersons.InsurancePersonsHelper.getInsuranceDatabase

import "edu.kit.ipd.sdq.metamodels.persons" as persons
import "edu.kit.ipd.sdq.metamodels.insurance" as insurance

reactions: insuranceToPersons
in reaction to changes in Insurance
execute actions in Persons

reaction CreatedInsuranceDatabase {
	after element insurance::InsuranceDatabase created and inserted as root
	call createPersonRegister(newValue)
}

routine createPersonRegister(insurance::InsuranceDatabase insuranceDatabase) {
	action {
		val personRegister = create persons::PersonRegister and initialize {
			persistProjectRelative(insuranceDatabase, personRegister, "model/persons.persons")
		}
		add correspondence between personRegister and insuranceDatabase
	}
}

reaction DeletedInsuranceDatabase {
	after element insurance::InsuranceDatabase deleted
	call deletePersonRegister(affectedEObject)
}

routine deletePersonRegister(insurance::InsuranceDatabase insuranceDatabase) {
	match {
		val personRegister = retrieve persons::PersonRegister corresponding to insuranceDatabase
	}
	action {
		delete personRegister
	}
}
	
reaction CreatedClient {
	after element insurance::InsuranceClient created and inserted in insurance::InsuranceDatabase[insuranceclient]
	call createPerson(newValue)
}

routine createPerson(insurance::InsuranceClient client) {
	action {
		call {
			switch client.gender {
				case Gender.MALE : createMalePerson(client)
				case Gender.FEMALE : createFemalePerson(client)
				default : throw new IllegalArgumentException("Unknown gender for persons")
			}
		}
	}
}

routine createMalePerson(insurance::InsuranceClient client) {
	match {
		val personRegister = retrieve persons::PersonRegister corresponding to client.insuranceDatabase
	}
	action {
		val newPerson = create persons::Male and initialize {
			newPerson.fullName = client.name
		}
		update personRegister {
			personRegister.persons += newPerson
		} 
		add correspondence between client and newPerson
	}
}

routine createFemalePerson(insurance::InsuranceClient client) {
	match {
		val personRegister = retrieve persons::PersonRegister corresponding to client.insuranceDatabase
	}
	action {
		val newPerson = create persons::Female and initialize {
			newPerson.fullName = client.name
		}
		update personRegister {
			personRegister.persons += newPerson
		}
		add correspondence between client and newPerson
	}
}

reaction ChangedName {
	after attribute replaced at insurance::InsuranceClient[name]
	call changeFullName(affectedEObject)
}

routine changeFullName(insurance::InsuranceClient client) {
	match {
		val person = retrieve persons::Person corresponding to client
	}
	action {
		update person {
			person.fullName = client.name
		}
	}
}

reaction ChangedGender {
	after attribute replaced at insurance::InsuranceClient[gender]
	call changeGender(affectedEObject)
}

routine changeGender(insurance::InsuranceClient client) {
	match {
		val person = retrieve persons::Person corresponding to client
	}
	action {
		call {
			switch client.gender {
				case Gender.MALE :
					if (!(person instanceof Male)) {
						deletePerson(client)
						createMalePerson(client)
					}
				case Gender.FEMALE :
					if (!(person instanceof Female)) {
						deletePerson(client)
						createFemalePerson(client)
					}
				default : throw new IllegalArgumentException("Gender of client is unknown.")
			}
		}
	}
}

reaction DeletedClient {
	after element insurance::InsuranceClient deleted
	call deletePerson(affectedEObject)
}

routine deletePerson(insurance::InsuranceClient client) {
	match {
		val person = retrieve persons::Person corresponding to client
	}
	action {
		remove correspondence between client and person
		delete person
	}
}
