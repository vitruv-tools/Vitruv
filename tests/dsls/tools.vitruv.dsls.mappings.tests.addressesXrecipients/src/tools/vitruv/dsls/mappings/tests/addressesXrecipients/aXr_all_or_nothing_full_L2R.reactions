import static tools.vitruv.dsls.mappings.tests.addressesXrecipients.mappings.aXr_all_or_nothing.AdRootXReRootMapping.*
import static tools.vitruv.dsls.mappings.tests.addressesXrecipients.mappings.aXr_all_or_nothing.AddressXRecipientLocationCityMapping.*
import static tools.vitruv.dsls.mappings.tests.addressesXrecipients.mappings.aXr_all_or_nothing.conditions.AdRootXReRootConditions.*
import static tools.vitruv.dsls.mappings.tests.addressesXrecipients.mappings.aXr_all_or_nothing.conditions.AddressXRecipientLocationCityConditions.*
import tools.vitruv.demo.domains.recipients.RecipientsNamespace

import "edu.kit.ipd.sdq.metamodels.addresses" as ad
import "edu.kit.ipd.sdq.metamodels.recipients" as re

reactions: adXre_L2R 
in reaction to changes in Addresses
execute actions in Recipients

/******************************************************
********** BEGIN GLOBAL REACTION AND ROUTINE **********
*******************************************************/
reaction AnyChange {
	after any change
	call {
		ensureAllMappings()
	}
}

routine ensureAllMappings() {
	action {
		call {
			// TODO MK ENSURE THAT DEPENDED MAPPINGS ARE ENSURED BEFORE DEPENDING MAPPINGS
			ensureAdRootXReRootMapping()
			ensureAddressXRecipientLocationCityMapping()
		}
	}
}

/******************************************************
********** BEGIN AdRootXReRoot MAPPING **********
*******************************************************/
routine ensureAdRootXReRootMapping() {
	action {
		call {
			deleteAdRootXReRootMappingInstances()
			createAdRootXReRootMappingInstances()
			updateAdRootXReRootMappingInstances()
		}
	}
}

/********** BEGIN AdRootXReRoot DELETE ROUTINES **********/
routine deleteAdRootXReRootMappingInstances() {
	action {
		call {
			val instances = adRootXReRootMapping.getLeftInstanceHalvesClone()
			for (instance : instances) {
				deleteAdRootXReRootMappingInstance(instance.ARoot)
			}
		}
	}
}

routine deleteAdRootXReRootMappingInstance(ad::Addresses aRoot) {
	match {
		check {
			!adRootXReRootConditions.checkLeftConditions(aRoot)
		}
		val rRoot = retrieve re::Recipients corresponding to aRoot
			tagged with "AdRootXReRootMapping"
	}
	action {
		// TODO MK if CorrespondenceModel performs cleanup do not explicitly delete c here
		remove correspondence between aRoot and rRoot tagged with "AdRootXReRoot"
		delete rRoot
		execute {
			adRootXReRootMapping.removeInvalidatedInstanceHalves(aRoot, rRoot)
		}
	}
}

/********** BEGIN AdRootXReRoot CREATE ROUTINES **********/
routine createAdRootXReRootMappingInstances() {
	action {
		call {
			val candidates = adRootXReRootMapping.getLeftCandidatesClone()
			for (candidate : candidates) {
				createAdRootXReRootMappingInstance(candidate.ARoot)
			}
		}
	}
}

routine createAdRootXReRootMappingInstance(ad::Addresses aRoot) {
	match {
		check {
			adRootXReRootConditions.checkLeftConditions(aRoot)
		}
	}
	action {
		val rRoot = create re::Recipients
		add correspondence between aRoot and rRoot
			tagged with "AdRootXReRootMapping"
		call {
			enforceAdRootXReRootMappingConditionsFromLeftToRight(aRoot, rRoot)
		}
		execute {
			adRootXReRootMapping.registerRightElementsAndPromoteCandidates(aRoot, rRoot)
			persistProjectRelative(aRoot, rRoot, aRoot.eResource.URI.trimFileExtension.lastSegment + "." + RecipientsNamespace.FILE_EXTENSION)
		}
	}
}

routine enforceRightAdRootXReRootMappingConditions(re::Recipients rRoot) {
	action {
		update rRoot {	
			// no single-sided conditions for rRoot
		}
	}
}

routine enforceAdRootXReRootMappingConditionsFromLeftToRight(ad::Addresses aRoot, re::Recipients rRoot) {
	action {
		call {
			enforceRightAdRootXReRootMappingConditions(rRoot)
		}
		// no bidirectionalizable conditions for rRoot
	}
}

/********** BEGIN AdRootXReRootMapping UPDATE ROUTINES **********/
routine updateAdRootXReRootMappingInstances() {
	action {
		call {
			val instances = adRootXReRootMapping.getLeftInstanceHalvesClone()
			for (instance : instances) {
				updateAdRootXReRootMappingInstance(instance.ARoot)
			}
		}
	}
}

routine updateAdRootXReRootMappingInstance(ad::Addresses aRoot) {
	match {
		check {
			adRootXReRootConditions.checkLeftConditions(aRoot)
		}
		val rRoot = retrieve re::Recipients corresponding to aRoot
			tagged with "AdRootXReRootMapping"
	}
	action {
		call {
			enforceAdRootXReRootMappingConditionsFromLeftToRight(aRoot, rRoot)
		}
	}
}

/******************************************************
********** BEGIN AddressXRecipientLocationCity MAPPING **********
*******************************************************/
routine ensureAddressXRecipientLocationCityMapping() {
	action {
		call {
			deleteAddressXRecipientLocationCityMappingInstances()
			createAddressXRecipientLocationCityMappingInstances()
			updateAddressXRecipientLocationCityMappingInstances()
		}
	}
}

/********** BEGIN AddressXRecipientLocationCity DELETE ROUTINES **********/
routine deleteAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val instances = addressXRecipientLocationCityMapping.getLeftInstanceHalvesClone()
			for (instance : instances) {
				deleteAddressXRecipientLocationCityMappingInstance(instance.rootXroot.ARoot, instance.a)
			}
		}
	}
}

routine deleteAddressXRecipientLocationCityMappingInstance(ad::Addresses aRoot, ad::Address a) {
	match {
		check {
			!addressXRecipientLocationCityConditions.checkLeftConditions(aRoot, a)
		}
		val r = retrieve re::Recipient corresponding to a
			tagged with "AddressXRecipientLocationCityMapping"
		val l = retrieve re::Location corresponding to a
			tagged with "AddressXRecipientLocationCityMapping"
		val c = retrieve re::City corresponding to a
			tagged with "AddressXRecipientLocationCityMapping"
	}
	action {
		remove correspondence between a and r tagged with "AddressXRecipientLocationCity"
		remove correspondence between a and l tagged with "AddressXRecipientLocationCity"
		remove correspondence between a and c tagged with "AddressXRecipientLocationCity"
		delete r
		delete l
		delete c
	}
}

/********** BEGIN AddressXRecipientLocationCity CREATE ROUTINES **********/
routine createAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val candidates = addressXRecipientLocationCityMapping.getLeftCandidatesClone()
			for (candidate : candidates) {
				createAddressXRecipientLocationCityMappingInstance(candidate.rootXroot.ARoot, candidate.a)
			}
		}
	}
}

routine createAddressXRecipientLocationCityMappingInstance(ad::Addresses aRoot, ad::Address a) {
	match {
		val rRoot = retrieve re::Recipients corresponding to aRoot
			tagged with "AdRootXReRootMapping"
		check {
			addressXRecipientLocationCityConditions.checkLeftConditions(aRoot, a)
		}
	}
	action {
		val r = create re::Recipient
		val l = create re::Location
		val c = create re::City
		add correspondence between a and r
			tagged with "AddressXRecipientLocationCityMapping"
		add correspondence between a and l
			tagged with "AddressXRecipientLocationCityMapping"
		add correspondence between a and c
			tagged with "AddressXRecipientLocationCityMapping"
		call {
			enforceAddressXRecipientLocationCityMappingConditionsFromLeftToRight(aRoot, rRoot, a, r, l, c)
		}
		execute {
			addressXRecipientLocationCityMapping.registerRightElementsAndPromoteCandidates(aRoot, rRoot, a, r, l, c)
		}
	}
}

routine enforceRightAddressXRecipientLocationCityMappingConditions(re::Recipients rRoot, re::Recipient r, re::Location l, re::City c) {
	action {
		update rRoot {
			// enforce r in rootXroot:rRoot.recipients
			rRoot.recipients.add(r)
		}
		update r {
			// enforce r.business == true
			r.business = true
			// enforce r.locatedAt == l
			r.locatedAt = l
			// enforce r.locatedIn == c
			r.locatedIn = c
		}
		update l {
			// enforce l.number > 0
			if (l.number <= 0) {
				l.number = 0
			}
		}
		update c {
			// enforce c.zipCode != null
			if (c.zipCode === null) {
				c.zipCode == ""
			}
		}
	}
}

routine enforceAddressXRecipientLocationCityMappingConditionsFromLeftToRight(ad::Addresses aRoot, re::Recipients rRoot, ad::Address a, re::Recipient r, re::Location l, re::City c) {
	action {
		call {
			enforceRightAddressXRecipientLocationCityMappingConditions(rRoot, r, l, c)
		}
		update l {
			// enforce inverse of:
			// a.number = l.number
			l.number = a.number
			// enforce inverse of:
			// a.street = l.street
			l.street = a.street
		}
		update c {
			// enforce inverse of:
			// a.zipCode = c.zipCode
			c.zipCode = a.zipCode
		}
	}
}

/********** BEGIN AddressXRecipientLocationCity UPDATE ROUTINES **********/
routine updateAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val instances = addressXRecipientLocationCityMapping.getLeftInstanceHalvesClone()
			for (instance : instances) {
				updateAddressXRecipientLocationCityMappingInstance(instance.rootXroot.ARoot, instance.a)
			}
		}
	}
}

routine updateAddressXRecipientLocationCityMappingInstance(ad::Addresses aRoot, ad::Address a) {
	match {
		val rRoot = retrieve re::Recipients corresponding to aRoot
			tagged with "AdRootXReRootMapping"
		val r = retrieve re::Recipient corresponding to a
			tagged with "AddressXRecipientLocationCityMapping"
		val l = retrieve re::Location corresponding to a
			tagged with "AddressXRecipientLocationCityMapping"
		val c = retrieve re::City corresponding to a
			tagged with "AddressXRecipientLocationCityMapping"
		check {
			addressXRecipientLocationCityConditions.checkLeftConditions(aRoot, a)
		}
	}
	action {
		call {
			enforceAddressXRecipientLocationCityMappingConditionsFromLeftToRight(aRoot, rRoot, a, r, l, c)
		}
	}
}

/******************************************************
 ********** BEGIN CREATE REACTIONS **********
 ******************************************************/
reaction AddressesCreated {
	after element ad::Addresses created
	call {
		adRootXReRootMapping.addAddresses(affectedEObject)
	}
}

reaction AddressCreated {
	after element ad::Address created
	call {
		addressXRecipientLocationCityMapping.addAddress(affectedEObject)
	}
}

/******************************************************
 ********** BEGIN DELETE REACTIONS **********
 ******************************************************/
reaction AddressesDeleted {
	after element ad::Addresses deleted
	call {
		adRootXReRootMapping.removeAddresses(affectedEObject)
	}
}

reaction AddressDeleted {
	after element ad::Address deleted
	call {
		addressXRecipientLocationCityMapping.removeAddress(affectedEObject)
	}
}